.TH "md__c___users_nwabu__desktop__emmanuel__f_a_l_l_2022__compiler__construction__group_22__v_natural_english_tokenizer__r_e_a_d_m_e" 3 "Tue Dec 6 2022" "GROUP_22_V" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__c___users_nwabu__desktop__emmanuel__f_a_l_l_2022__compiler__construction__group_22__v_natural_english_tokenizer__r_e_a_d_m_e \- natural-english-tokenizer 
.PP
In computer science, lexical analysis, lexing or tokenization is the process of converting a sequence of characters into a sequence of lexical tokens\&.
.SH "Team Members"
.PP
sandrine Awah Nwabufo\&.T\&.Emmanuel Junior
.SH "Class sentence"
.PP
it contains several method
.PP
f = open('\&./assets/sample\&.txt', 'r') sample = f\&.read() f\&.close()
.SH "def sentence_check(text):"
.PP
.SH "This method simple print out a correct sentence following the pattern"
.PP
pattern = re\&.compile('[A-Z][^.!?]*[!?.]') if re\&.match(pattern, text): text print(text) return text else: print('Invalid') 
