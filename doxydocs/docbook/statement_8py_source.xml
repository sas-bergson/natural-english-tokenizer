<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_statement_8py_source" xml:lang="en-US">
<title>statement.py</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_statement_8py_source_1l00001"/><link linkend="_namespacestatement">00001</link> <emphasis role="keyword">import</emphasis>&#32;re
<anchor xml:id="_statement_8py_source_1l00002"/>00002 
<anchor xml:id="_statement_8py_source_1l00003"/>00003 <emphasis role="stringliteral">&quot;&quot;&quot;!&#32;@brief&#32;Example&#32;Python&#32;program&#32;with&#32;Doxygen&#32;style&#32;comments.&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00004"/>00004 
<anchor xml:id="_statement_8py_source_1l00005"/>00005 
<anchor xml:id="_statement_8py_source_1l00006"/><link linkend="_classstatement_1_1statement__tokenizer">00006</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer">statement_tokenizer</link>:
<anchor xml:id="_statement_8py_source_1l00007"/><link linkend="_classstatement_1_1statement__tokenizer_1a539e367f627418c7f0d210d6f1983f2b">00007</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer_1a539e367f627418c7f0d210d6f1983f2b">__init__</link>(self):
<anchor xml:id="_statement_8py_source_1l00008"/>00008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00009"/>00009 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;the&#32;constructor.&#32;where&#32;all&#32;the&#32;regex&#32;are&#32;defined&#32;<emphasis role="keywordflow">and</emphasis>&#32;the&#32;word&#32;that&#32;the&#32;user&#32;<emphasis role="keywordflow">or</emphasis>&#32;the&#32;calling&#32;file&#32;will&#32;use&#32;to&#32;call&#32;the&#32;method.<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00010"/>00010 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1ab1964d81535413d9a90d7808efa15f16">_pattern</link>&#32;=&#32;r&quot;[A-Z]+[a-z]*\s\.&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1a6014c2bbeb9f5d74430d8079c8e79380">_sentence_pattern</link>&#32;=&#32;<emphasis role="stringliteral">r&apos;([A-Z][^\.!?]*[\.!?])&apos;</emphasis>
<anchor xml:id="_statement_8py_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1a60f9e3d9dd21647a3ecdb891b0820e5d">_word_pattern</link>&#32;=&#32;<emphasis role="stringliteral">r&apos;\w+&apos;</emphasis>
<anchor xml:id="_statement_8py_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1a9b0e58181d537ac5ad3f9943fb5f59f6">_regex</link>&#32;=&#32;re.compile(self.<link linkend="_classstatement_1_1statement__tokenizer_1a6014c2bbeb9f5d74430d8079c8e79380">_sentence_pattern</link>)
<anchor xml:id="_statement_8py_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1ae3e4a3059da14fb5b9c8801bc9d96ff8">_tokens</link>&#32;=&#32;[]
<anchor xml:id="_statement_8py_source_1l00015"/>00015 
<anchor xml:id="_statement_8py_source_1l00016"/><link linkend="_classstatement_1_1statement__tokenizer_1af31fdead83a1bf102c9c769855cc5965">00016</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer_1af31fdead83a1bf102c9c769855cc5965">get_tokens</link>(self,&#32;text)&#32;-&gt;&#32;list:
<anchor xml:id="_statement_8py_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00018"/>00018 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;responsible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;splitting&#32;of&#32;the&#32;individual&#32;strings&#32;into&#32;the&#32;required&#32;tokens&#32;which
<anchor xml:id="_statement_8py_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;takes&#32;&#32;text&#32;(string)&#32;the&#32;text&#32;that&#32;<emphasis role="keywordflow">is</emphasis>&#32;to&#32;be&#32;split&#32;into&#32;tokens.&#32;<emphasis role="keywordflow">and</emphasis>&#32;returns&#32;a&#32;list&#32;of&#32;tokens.<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00020"/>00020 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1ae3e4a3059da14fb5b9c8801bc9d96ff8">_tokens</link>&#32;=&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1a9e8a94c666203e2e3a1e502381afcbec">peformSentenceSplit</link>(text)</emphasis>
<anchor xml:id="_statement_8py_source_1l00021"/>00021 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1ae3e4a3059da14fb5b9c8801bc9d96ff8">_tokens</link>
<anchor xml:id="_statement_8py_source_1l00022"/>00022 
<anchor xml:id="_statement_8py_source_1l00023"/><link linkend="_classstatement_1_1statement__tokenizer_1a9449283c6a72dff3aa0ede6aed4f0186">00023</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer_1a9449283c6a72dff3aa0ede6aed4f0186">__str__</link>(self)&#32;-&gt;&#32;str:
<anchor xml:id="_statement_8py_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00025"/>00025 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;responsible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;printing&#32;of&#32;the&#32;tokens&#32;that&#32;are&#32;returned&#32;by&#32;the&#32;get_tokens&#32;method.
<anchor xml:id="_statement_8py_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;takes&#32;no&#32;arguments&#32;<emphasis role="keywordflow">and</emphasis>&#32;returns&#32;a&#32;string&#32;of&#32;the&#32;tokens.&#32;it&#32;basically&#32;overites&#32;the&#32;default&#32;__str__&#32;method.<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00027"/>00027 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">for</emphasis>&#32;s&#32;<emphasis role="keywordflow">in</emphasis>&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1ae3e4a3059da14fb5b9c8801bc9d96ff8">_tokens</link>:
<anchor xml:id="_statement_8py_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(f<emphasis role="stringliteral">&quot;statement&#32;-&gt;&#32;{s}&quot;</emphasis>)
<anchor xml:id="_statement_8py_source_1l00029"/>00029 
<anchor xml:id="_statement_8py_source_1l00030"/><link linkend="_classstatement_1_1statement__tokenizer_1a85a8d55580c14f82f58e630ba075026d">00030</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer_1a85a8d55580c14f82f58e630ba075026d">__repr__</link>(self)&#32;-&gt;&#32;str:
<anchor xml:id="_statement_8py_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00032"/>00032 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;responsible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;printing&#32;of&#32;the&#32;tokens&#32;that&#32;are&#32;returned&#32;by&#32;the&#32;get_tokens&#32;method.
<anchor xml:id="_statement_8py_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;takes&#32;no&#32;arguments&#32;<emphasis role="keywordflow">and</emphasis>&#32;returns&#32;a&#32;string&#32;of&#32;the&#32;tokens.&#32;it&#32;basically&#32;overites&#32;the&#32;default&#32;__repr__&#32;method.<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00034"/>00034 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">for</emphasis>&#32;s&#32;<emphasis role="keywordflow">in</emphasis>&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1ae3e4a3059da14fb5b9c8801bc9d96ff8">_tokens</link>:
<anchor xml:id="_statement_8py_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(f<emphasis role="stringliteral">&quot;statement&#32;-&gt;&#32;{s}&quot;</emphasis>)
<anchor xml:id="_statement_8py_source_1l00036"/>00036 
<anchor xml:id="_statement_8py_source_1l00037"/><link linkend="_classstatement_1_1statement__tokenizer_1a9e8a94c666203e2e3a1e502381afcbec">00037</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer_1a9e8a94c666203e2e3a1e502381afcbec">peformSentenceSplit</link>(self,&#32;text):
<anchor xml:id="_statement_8py_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;This&#32;function&#32;takes&#32;part&#32;in&#32;tokenization&#32;of&#32;whole&#32;text&#32;blocks&#32;to&#32;aid&#32;the&#32;word&#32;tokenizer&#32;to&#32;be&#32;able&#32;to&#32;identifty&#32;tokens</emphasis>
<anchor xml:id="_statement_8py_source_1l00039"/>00039 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;based&#32;on&#32;specific&#32;word.&#32;This&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;a&#32;part&#32;which&#32;makes&#32;the&#32;whole&#32;system&#32;modular&#32;making&#32;it&#32;possible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;sentence&#32;to&#32;be&#32;handled&#32;<emphasis role="keyword">as</emphasis>
<anchor xml:id="_statement_8py_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blocks.&#32;this&#32;will&#32;also&#32;give&#32;the&#32;possibility&#32;to&#32;thet&#32;count&#32;of&#32;the&#32;number&#32;of&#32;sentences&#32;<emphasis role="keywordflow">in</emphasis>
<anchor xml:id="_statement_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00042"/>00042 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;formatter&#32;=&#32;re.compile(self.<link linkend="_classstatement_1_1statement__tokenizer_1a6014c2bbeb9f5d74430d8079c8e79380">_sentence_pattern</link>,&#32;re.M)</emphasis>
<anchor xml:id="_statement_8py_source_1l00043"/>00043 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;formatter.findall(text)
<anchor xml:id="_statement_8py_source_1l00044"/>00044 
<anchor xml:id="_statement_8py_source_1l00045"/><link linkend="_classstatement_1_1statement__tokenizer_1a10eb35f9e1c1f020d416d494e0ba5f5b">00045</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer_1a10eb35f9e1c1f020d416d494e0ba5f5b">performWordSplit</link>(self,&#32;text):
<anchor xml:id="_statement_8py_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;This&#32;function&#32;takes&#32;part&#32;in&#32;tokenization&#32;of&#32;whole&#32;text&#32;blocks&#32;to&#32;aid&#32;the&#32;word&#32;tokenizer&#32;to&#32;be&#32;able&#32;to&#32;identifty&#32;tokens</emphasis>
<anchor xml:id="_statement_8py_source_1l00047"/>00047 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;based&#32;on&#32;specific&#32;word.&#32;This&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;a&#32;part&#32;which&#32;makes&#32;the&#32;whole&#32;system&#32;modular&#32;making&#32;it&#32;possible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;sentence&#32;to&#32;be&#32;handled&#32;<emphasis role="keyword">as</emphasis>
<anchor xml:id="_statement_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blocks.&#32;this&#32;will&#32;also&#32;give&#32;the&#32;possibility&#32;to&#32;thet&#32;count&#32;of&#32;the&#32;number&#32;of&#32;sentences&#32;<emphasis role="keywordflow">in</emphasis>
<anchor xml:id="_statement_8py_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00050"/>00050 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;formatter&#32;=&#32;re.compile(self.<link linkend="_classstatement_1_1statement__tokenizer_1a60f9e3d9dd21647a3ecdb891b0820e5d">_word_pattern</link>,&#32;re.M)</emphasis>
<anchor xml:id="_statement_8py_source_1l00051"/>00051 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;formatter.findall(text)
<anchor xml:id="_statement_8py_source_1l00052"/>00052 
<anchor xml:id="_statement_8py_source_1l00053"/><link linkend="_classstatement_1_1statement__tokenizer_1a43a95712f250e8ded2b23ef48988bc86">00053</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer_1a43a95712f250e8ded2b23ef48988bc86">getAllTokens</link>(self,&#32;text):
<anchor xml:id="_statement_8py_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00055"/>00055 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;function&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;responsible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;tokenization&#32;of&#32;the&#32;whole&#32;text&#32;block.&#32;it&#32;takes&#32;the&#32;text&#32;block&#32;<emphasis role="keyword">as</emphasis>&#32;an&#32;argument&#32;<emphasis role="keywordflow">and</emphasis>&#32;returns&#32;a&#32;list&#32;of&#32;tokens.
<anchor xml:id="_statement_8py_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00057"/>00057 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;textData&#32;=&#32;self.<link linkend="_classstatement_1_1statement__tokenizer_1afa19774ffa56f61147efb0a4e84f88b1">retainAllTokens</link>(text)</emphasis>
<anchor xml:id="_statement_8py_source_1l00058"/>00058 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;textData.split()
<anchor xml:id="_statement_8py_source_1l00059"/>00059 
<anchor xml:id="_statement_8py_source_1l00060"/><link linkend="_classstatement_1_1statement__tokenizer_1afa19774ffa56f61147efb0a4e84f88b1">00060</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer_1afa19774ffa56f61147efb0a4e84f88b1">retainAllTokens</link>(self,&#32;text):
<anchor xml:id="_statement_8py_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00062"/>00062 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this&#32;fuction&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;tp&#32;prevent&#32;the&#32;elimination&#32;of&#32;special&#32;characters&#32;to&#32;avoid&#32;elimination&#32;during&#32;text&#32;splitting
<anchor xml:id="_statement_8py_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this&#32;will&#32;be&#32;especially&#32;important&#32;what&#32;there&#32;will&#32;to&#32;be&#32;identification&#32;of&#32;known&#32;patters.
<anchor xml:id="_statement_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;The&#32;function&#32;contains&#32;a&#32;special&#32;regular&#32;expresssion&#32;that&#32;checks&#32;all&#32;characaters&#32;individually
<anchor xml:id="_statement_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00066"/>00066 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new_text&#32;=&#32;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(len(text)):
<anchor xml:id="_statement_8py_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;\.|,|\?|\&apos;|\)|\}|\]|\:|\;&apos;</emphasis>,&#32;text[i]):
<anchor xml:id="_statement_8py_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new_text&#32;=&#32;new_text+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>+text[i]
<anchor xml:id="_statement_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;\(|\{|\[|\s&apos;</emphasis>,&#32;text[i]):
<anchor xml:id="_statement_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new_text&#32;=&#32;new_text+text[i]+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_statement_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new_text&#32;=&#32;new_text+text[i]
<anchor xml:id="_statement_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;new_text
<anchor xml:id="_statement_8py_source_1l00075"/>00075 <emphasis role="comment">#&#32;&#32;&#32;&#32;generate&#32;a&#32;dunction&#32;to&#32;match&#32;all&#32;words&#32;starting&#32;with&#32;an&#32;A&#32;or&#32;a</emphasis>
<anchor xml:id="_statement_8py_source_1l00076"/>00076 
<anchor xml:id="_statement_8py_source_1l00077"/><link linkend="_classstatement_1_1statement__tokenizer_1a6736292ecfe03911105e95b9d36c6d97">00077</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer_1a6736292ecfe03911105e95b9d36c6d97">matchAllWordsStartingWithA</link>(self,&#32;text):
<anchor xml:id="_statement_8py_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;The&#32;aim&#32;of&#32;this&#32;function&#32;is&#32;to&#32;match&#32;all&#32;words&#32;starting&#32;with&#32;an&#32;A&#32;or&#32;a&#32;this&#32;is&#32;performed&#32;by&#32;the&#32;use&#32;of&#32;a&#32;regular&#32;expression&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;re.findall(<emphasis role="stringliteral">r&apos;\b[Aa]\w+&apos;</emphasis>,&#32;text)
<anchor xml:id="_statement_8py_source_1l00080"/>00080 
<anchor xml:id="_statement_8py_source_1l00081"/><link linkend="_classstatement_1_1statement__tokenizer_1af571c51d84cfeb007f10f703bc7e65c4">00081</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classstatement_1_1statement__tokenizer_1af571c51d84cfeb007f10f703bc7e65c4">fsa</link>(word):
<anchor xml:id="_statement_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if(re.search(<emphasis role="stringliteral">r&apos;^a.+&apos;</emphasis>,&#32;word)):
<anchor xml:id="_statement_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ance$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ence$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ar$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*er$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ir$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*or$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ur$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ism$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ment$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*age$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*hood$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ness$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*irt$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*er$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*bots&apos;</emphasis>,&#32;word):
<anchor xml:id="_statement_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;noun&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*able$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ible$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ant$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ent$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ists$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ist$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ous$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ful$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ish&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ive$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ize$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ify$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ize&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ize$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ize$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ize$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ise$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ize$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ed$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ate$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*y$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ons$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ing&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*de&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ound&apos;</emphasis>,&#32;word):
<anchor xml:id="_statement_8py_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;verb&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ly$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*ry$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;word&#32;==&#32;<emphasis role="stringliteral">&quot;right&quot;</emphasis>&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*here$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;word&#32;==&#32;<emphasis role="stringliteral">&quot;wrong&quot;</emphasis>&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*here$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;word&#32;==&#32;<emphasis role="stringliteral">&apos;soon&apos;</emphasis>&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*soon$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*times$&apos;</emphasis>,&#32;word)&#32;<emphasis role="keywordflow">or</emphasis>&#32;re.search(<emphasis role="stringliteral">r&apos;.*in$&apos;</emphasis>,&#32;word):
<anchor xml:id="_statement_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;adverb&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_statement_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;valid&#32;but&#32;unknown&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_statement_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="stringliteral">&quot;invalid&#32;word&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;generate&#32;a&#32;function&#32;to&#32;identify&#32;all&#32;parts&#32;of&#32;speech&#32;in&#32;a&#32;text</emphasis>
<anchor xml:id="_statement_8py_source_1l00094"/>00094 &#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;def&#32;identifyAllPartsOfSpeech(self,&#32;text):</emphasis>
<anchor xml:id="_statement_8py_source_1l00095"/>00095 
<anchor xml:id="_statement_8py_source_1l00096"/>00096 
<anchor xml:id="_statement_8py_source_1l00097"/>00097 <emphasis role="comment">#&#32;if&#32;__name__&#32;==&#32;&quot;__main__&quot;:</emphasis>
<anchor xml:id="_statement_8py_source_1l00098"/>00098 <emphasis role="comment">#&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;statement_tokenizer()</emphasis>
<anchor xml:id="_statement_8py_source_1l00099"/>00099 <emphasis role="comment">#&#32;&#32;&#32;&#32;&#32;text&#32;=&#32;&quot;&quot;&quot;Today,&#32;technology&#32;is&#32;a&#32;subject&#32;of&#32;debate&#32;because&#32;it&#32;is&#32;considered&#32;to&#32;be&#32;a&#32;double-edged&#32;sword.&#32;While&#32;it&#32;has&#32;helped&#32;humanity&#32;in&#32;extending&#32;its&#32;potential&#32;with&#32;outstanding&#32;inventions,&#32;it&#32;is&#32;nonetheless&#32;threatening&#32;humankind&#32;through&#32;some&#32;other&#32;destructive&#32;ones.&#32;In&#32;addition&#32;to&#32;polluting&#32;the&#32;earth&#32;in&#32;unprecedented&#32;ways,&#32;wars&#32;have&#32;become&#32;more&#32;and&#32;more&#32;devastating&#32;due&#32;to&#32;technological&#32;inventions.&#32;Ethical&#32;dimensions&#32;of&#32;recent&#32;technological&#32;developments,&#32;such&#32;as&#32;DNA&#32;engineering,&#32;have&#32;become&#32;a&#32;focal&#32;point&#32;of&#32;questioning&#32;and&#32;discussion.&#32;Philosophical&#32;debates&#32;have&#32;arisen&#32;over&#32;the&#32;use&#32;of&#32;technology,&#32;with&#32;disagreements&#32;over&#32;whether&#32;technology&#32;improves&#32;the&#32;human&#32;condition&#32;or&#32;worsens&#32;it.</emphasis>
<anchor xml:id="_statement_8py_source_1l00100"/>00100 <emphasis role="comment">#&#32;To&#32;make&#32;matters&#32;worse,&#32;a&#32;consensus&#32;definition&#32;of&#32;technology&#32;has&#32;become&#32;more&#32;difficult&#32;to&#32;find&#32;due&#32;to&#32;recent&#32;evolution&#32;in&#32;science&#32;and&#32;its&#32;applications.&#32;It&#32;is&#32;especially&#32;confusing&#32;to&#32;decide&#32;whether&#32;technology&#32;refers&#32;to&#32;the&#32;machines&#32;(or&#32;more&#32;precisely&#32;the&#32;hardware),&#32;the&#32;rules&#32;that&#32;govern&#32;or&#32;make&#32;them&#32;work,&#32;the&#32;system&#32;that&#32;operates&#32;them&#32;or&#32;the&#32;different&#32;applications&#32;of&#32;science&#32;that&#32;are&#32;related&#32;to&#32;them.&#32;What&#32;is&#32;sure&#32;is&#32;that&#32;technology&#32;has&#32;shaped&#32;societies&#32;and&#32;adapted&#32;itself&#32;to&#32;people&apos;s&#32;changing&#32;needs.</emphasis>
<anchor xml:id="_statement_8py_source_1l00101"/>00101 <emphasis role="comment">#&#32;&quot;&quot;&quot;</emphasis>
<anchor xml:id="_statement_8py_source_1l00102"/>00102 <emphasis role="comment">#&#32;&#32;&#32;&#32;&#32;formatted&#32;=&#32;data.retainAllTokens(text.strip())</emphasis>
<anchor xml:id="_statement_8py_source_1l00103"/>00103 <emphasis role="comment">#&#32;&#32;&#32;&#32;&#32;print(&quot;&#32;&quot;.join(data.matchAllWordsStartingWithA(formatted)))</emphasis>
</programlisting></section>
