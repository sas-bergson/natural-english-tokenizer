<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_main_8py_source" xml:lang="en-US">
<title>main.py</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_main_8py_source_1l00001"/><link linkend="_namespacemain">00001</link> <emphasis role="keyword">import</emphasis>&#32;re
<anchor xml:id="_main_8py_source_1l00002"/>00002 <emphasis role="keyword">from</emphasis>&#32;parts_speech&#32;<emphasis role="keyword">import</emphasis>&#32;*
<anchor xml:id="_main_8py_source_1l00003"/>00003 
<anchor xml:id="_main_8py_source_1l00004"/>00004 <emphasis role="stringliteral">&quot;&quot;&quot;!&#32;@brief&#32;Example&#32;Python&#32;program&#32;with&#32;Doxygen&#32;style&#32;comments.&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00005"/>00005 
<anchor xml:id="_main_8py_source_1l00006"/>00006 
<anchor xml:id="_main_8py_source_1l00007"/><link linkend="_classmain_1_1statement__tokenizer">00007</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer">statement_tokenizer</link>:
<anchor xml:id="_main_8py_source_1l00008"/><link linkend="_classmain_1_1statement__tokenizer_1ad69e6f7c8f99f1e12e40c495952e00e3">00008</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer_1ad69e6f7c8f99f1e12e40c495952e00e3">__init__</link>(self):
<anchor xml:id="_main_8py_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00010"/>00010 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;the&#32;constructor.&#32;where&#32;all&#32;the&#32;regex&#32;are&#32;defined&#32;<emphasis role="keywordflow">and</emphasis>&#32;the&#32;word&#32;that&#32;the&#32;user&#32;<emphasis role="keywordflow">or</emphasis>&#32;the&#32;calling&#32;file&#32;will&#32;use&#32;to&#32;call&#32;the&#32;method.<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00011"/>00011 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a7b99cd25f29acb6fe3dc0f3c65bfbf5e">_pattern</link>&#32;=&#32;r&quot;[A-Z]+[a-z]*\s\.&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1ae0524455667d6dc8697083a304272e9e">_sentence_pattern</link>&#32;=&#32;<emphasis role="stringliteral">r&apos;([A-Z][^\.!?]*[\.!?])&apos;</emphasis>
<anchor xml:id="_main_8py_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a102bd7c1d1ac8c1824b6471952aaaeae">_word_pattern</link>&#32;=&#32;<emphasis role="stringliteral">r&apos;\w+&apos;</emphasis>
<anchor xml:id="_main_8py_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1acb340652fbfa1cb86b8f21e5dfb05b67">_regex</link>&#32;=&#32;re.compile(self.<link linkend="_classmain_1_1statement__tokenizer_1ae0524455667d6dc8697083a304272e9e">_sentence_pattern</link>)
<anchor xml:id="_main_8py_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a8ab7cc298ab0ec6d81b9be7e4904cde7">_tokens</link>&#32;=&#32;[]
<anchor xml:id="_main_8py_source_1l00016"/><link linkend="_classmain_1_1statement__tokenizer_1a5c645ea998ef0569b7e292e4be29cc60">00016</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a5c645ea998ef0569b7e292e4be29cc60">nounList</link>&#32;=&#32;[]
<anchor xml:id="_main_8py_source_1l00017"/><link linkend="_classmain_1_1statement__tokenizer_1afd78f7a9c9e49e70eff211e394d51e62">00017</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1afd78f7a9c9e49e70eff211e394d51e62">pronounList</link>&#32;=&#32;[]
<anchor xml:id="_main_8py_source_1l00018"/><link linkend="_classmain_1_1statement__tokenizer_1a2632648ba3e0bab916fa5eeb06cb71bb">00018</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a2632648ba3e0bab916fa5eeb06cb71bb">adjectiveList</link>&#32;=&#32;[]
<anchor xml:id="_main_8py_source_1l00019"/><link linkend="_classmain_1_1statement__tokenizer_1a24c4eed7b89ee5776869a02ffe12b9a4">00019</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a24c4eed7b89ee5776869a02ffe12b9a4">verbList</link>&#32;=&#32;[]
<anchor xml:id="_main_8py_source_1l00020"/><link linkend="_classmain_1_1statement__tokenizer_1a8d588b23dd51598c21aa8db357a605c4">00020</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a8d588b23dd51598c21aa8db357a605c4">adverbList</link>&#32;=&#32;[]
<anchor xml:id="_main_8py_source_1l00021"/><link linkend="_classmain_1_1statement__tokenizer_1a588793a987c8ca33478a89ce83d2fc98">00021</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a588793a987c8ca33478a89ce83d2fc98">conjunctionsList</link>&#32;=&#32;[]
<anchor xml:id="_main_8py_source_1l00022"/><link linkend="_classmain_1_1statement__tokenizer_1a925c7c14ab6750a9aa8bf1e811ca93e8">00022</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a925c7c14ab6750a9aa8bf1e811ca93e8">interjectionsList</link>&#32;=&#32;[]
<anchor xml:id="_main_8py_source_1l00023"/><link linkend="_classmain_1_1statement__tokenizer_1a90d8cf9378c9353c8c8c4aec38374479">00023</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a90d8cf9378c9353c8c8c4aec38374479">unknownList</link>&#32;=&#32;[]
<anchor xml:id="_main_8py_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a8d588b23dd51598c21aa8db357a605c4">adverbList</link>&#32;=&#32;[]
<anchor xml:id="_main_8py_source_1l00025"/>00025 
<anchor xml:id="_main_8py_source_1l00026"/><link linkend="_classmain_1_1statement__tokenizer_1a695b1cb78882a051f601d83dc02a5b1f">00026</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer_1a695b1cb78882a051f601d83dc02a5b1f">get_tokens</link>(self,&#32;text)&#32;-&gt;&#32;list:
<anchor xml:id="_main_8py_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00028"/>00028 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;responsible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;splitting&#32;of&#32;the&#32;individual&#32;strings&#32;into&#32;the&#32;required&#32;tokens&#32;which
<anchor xml:id="_main_8py_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;takes&#32;&#32;text&#32;(string)&#32;the&#32;text&#32;that&#32;<emphasis role="keywordflow">is</emphasis>&#32;to&#32;be&#32;split&#32;into&#32;tokens.&#32;<emphasis role="keywordflow">and</emphasis>&#32;returns&#32;a&#32;list&#32;of&#32;tokens.<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00030"/>00030 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a8ab7cc298ab0ec6d81b9be7e4904cde7">_tokens</link>&#32;=&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a892f3c06d122cf209f32be6eefdbf5ef">peformSentenceSplit</link>(text)</emphasis>
<anchor xml:id="_main_8py_source_1l00031"/>00031 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a8ab7cc298ab0ec6d81b9be7e4904cde7">_tokens</link>
<anchor xml:id="_main_8py_source_1l00032"/>00032 
<anchor xml:id="_main_8py_source_1l00033"/><link linkend="_classmain_1_1statement__tokenizer_1a07a6fae900a0361a1169001e5300a935">00033</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer_1a07a6fae900a0361a1169001e5300a935">__str__</link>(self)&#32;-&gt;&#32;str:
<anchor xml:id="_main_8py_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00035"/>00035 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;responsible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;printing&#32;of&#32;the&#32;tokens&#32;that&#32;are&#32;returned&#32;by&#32;the&#32;get_tokens&#32;method.
<anchor xml:id="_main_8py_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;takes&#32;no&#32;arguments&#32;<emphasis role="keywordflow">and</emphasis>&#32;returns&#32;a&#32;string&#32;of&#32;the&#32;tokens.&#32;it&#32;basically&#32;overites&#32;the&#32;default&#32;__str__&#32;method.<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00037"/>00037 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">for</emphasis>&#32;s&#32;<emphasis role="keywordflow">in</emphasis>&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a8ab7cc298ab0ec6d81b9be7e4904cde7">_tokens</link>:
<anchor xml:id="_main_8py_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(f<emphasis role="stringliteral">&quot;statement&#32;-&gt;&#32;{s}&quot;</emphasis>)
<anchor xml:id="_main_8py_source_1l00039"/>00039 
<anchor xml:id="_main_8py_source_1l00040"/><link linkend="_classmain_1_1statement__tokenizer_1a13e7472cbf6f1e025916d043fbe32289">00040</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer_1a13e7472cbf6f1e025916d043fbe32289">__repr__</link>(self)&#32;-&gt;&#32;str:
<anchor xml:id="_main_8py_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00042"/>00042 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;method&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;responsible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;printing&#32;of&#32;the&#32;tokens&#32;that&#32;are&#32;returned&#32;by&#32;the&#32;get_tokens&#32;method.
<anchor xml:id="_main_8py_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;takes&#32;no&#32;arguments&#32;<emphasis role="keywordflow">and</emphasis>&#32;returns&#32;a&#32;string&#32;of&#32;the&#32;tokens.&#32;it&#32;basically&#32;overites&#32;the&#32;default&#32;__repr__&#32;method.<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00044"/>00044 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">for</emphasis>&#32;s&#32;<emphasis role="keywordflow">in</emphasis>&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a8ab7cc298ab0ec6d81b9be7e4904cde7">_tokens</link>:
<anchor xml:id="_main_8py_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(f<emphasis role="stringliteral">&quot;statement&#32;-&gt;&#32;{s}&quot;</emphasis>)
<anchor xml:id="_main_8py_source_1l00046"/>00046 
<anchor xml:id="_main_8py_source_1l00047"/><link linkend="_classmain_1_1statement__tokenizer_1a892f3c06d122cf209f32be6eefdbf5ef">00047</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer_1a892f3c06d122cf209f32be6eefdbf5ef">peformSentenceSplit</link>(self,&#32;text):
<anchor xml:id="_main_8py_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;This&#32;function&#32;takes&#32;part&#32;in&#32;tokenization&#32;of&#32;whole&#32;text&#32;blocks&#32;to&#32;aid&#32;the&#32;word&#32;tokenizer&#32;to&#32;be&#32;able&#32;to&#32;identifty&#32;tokens</emphasis>
<anchor xml:id="_main_8py_source_1l00049"/>00049 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;based&#32;on&#32;specific&#32;word.&#32;This&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;a&#32;part&#32;which&#32;makes&#32;the&#32;whole&#32;system&#32;modular&#32;making&#32;it&#32;possible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;sentence&#32;to&#32;be&#32;handled&#32;<emphasis role="keyword">as</emphasis>
<anchor xml:id="_main_8py_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blocks.&#32;this&#32;will&#32;also&#32;give&#32;the&#32;possibility&#32;to&#32;thet&#32;count&#32;of&#32;the&#32;number&#32;of&#32;sentences&#32;<emphasis role="keywordflow">in</emphasis>
<anchor xml:id="_main_8py_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00052"/>00052 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;formatter&#32;=&#32;re.compile(self.<link linkend="_classmain_1_1statement__tokenizer_1ae0524455667d6dc8697083a304272e9e">_sentence_pattern</link>,&#32;re.M)</emphasis>
<anchor xml:id="_main_8py_source_1l00053"/>00053 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;formatter.findall(text)
<anchor xml:id="_main_8py_source_1l00054"/>00054 
<anchor xml:id="_main_8py_source_1l00055"/><link linkend="_classmain_1_1statement__tokenizer_1abdac0a8fb895b8ddd348b882747b05db">00055</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer_1abdac0a8fb895b8ddd348b882747b05db">performWordSplit</link>(self,&#32;text):
<anchor xml:id="_main_8py_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;This&#32;function&#32;takes&#32;part&#32;in&#32;tokenization&#32;of&#32;whole&#32;text&#32;blocks&#32;to&#32;aid&#32;the&#32;word&#32;tokenizer&#32;to&#32;be&#32;able&#32;to&#32;identifty&#32;tokens</emphasis>
<anchor xml:id="_main_8py_source_1l00057"/>00057 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;based&#32;on&#32;specific&#32;word.&#32;This&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;a&#32;part&#32;which&#32;makes&#32;the&#32;whole&#32;system&#32;modular&#32;making&#32;it&#32;possible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;sentence&#32;to&#32;be&#32;handled&#32;<emphasis role="keyword">as</emphasis>
<anchor xml:id="_main_8py_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;blocks.&#32;this&#32;will&#32;also&#32;give&#32;the&#32;possibility&#32;to&#32;thet&#32;count&#32;of&#32;the&#32;number&#32;of&#32;sentences&#32;<emphasis role="keywordflow">in</emphasis>
<anchor xml:id="_main_8py_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00060"/>00060 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;formatter&#32;=&#32;re.compile(self.<link linkend="_classmain_1_1statement__tokenizer_1a102bd7c1d1ac8c1824b6471952aaaeae">_word_pattern</link>,&#32;re.M)</emphasis>
<anchor xml:id="_main_8py_source_1l00061"/>00061 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;formatter.findall(text)
<anchor xml:id="_main_8py_source_1l00062"/>00062 
<anchor xml:id="_main_8py_source_1l00063"/><link linkend="_classmain_1_1statement__tokenizer_1a91cf2ca25a0cc576d029920853392860">00063</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer_1a91cf2ca25a0cc576d029920853392860">getAllTokens</link>(self,&#32;text):
<anchor xml:id="_main_8py_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00065"/>00065 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;This&#32;function&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;responsible&#32;<emphasis role="keywordflow">for</emphasis>&#32;the&#32;tokenization&#32;of&#32;the&#32;whole&#32;text&#32;block.&#32;it&#32;takes&#32;the&#32;text&#32;block&#32;<emphasis role="keyword">as</emphasis>&#32;an&#32;argument&#32;<emphasis role="keywordflow">and</emphasis>&#32;returns&#32;a&#32;list&#32;of&#32;tokens.
<anchor xml:id="_main_8py_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00067"/>00067 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;textData&#32;=&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a6b94dcf6889b89105910bca6a62bfe64">retainAllTokens</link>(text)</emphasis>
<anchor xml:id="_main_8py_source_1l00068"/>00068 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;textData.split()
<anchor xml:id="_main_8py_source_1l00069"/>00069 
<anchor xml:id="_main_8py_source_1l00070"/><link linkend="_classmain_1_1statement__tokenizer_1a6b94dcf6889b89105910bca6a62bfe64">00070</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer_1a6b94dcf6889b89105910bca6a62bfe64">retainAllTokens</link>(self,&#32;text):
<anchor xml:id="_main_8py_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00072"/>00072 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this&#32;fuction&#32;</emphasis><emphasis role="keywordflow">is</emphasis>&#32;tp&#32;prevent&#32;the&#32;elimination&#32;of&#32;special&#32;characters&#32;to&#32;avoid&#32;elimination&#32;during&#32;text&#32;splitting
<anchor xml:id="_main_8py_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this&#32;will&#32;be&#32;especially&#32;important&#32;what&#32;there&#32;will&#32;to&#32;be&#32;identification&#32;of&#32;known&#32;patters.
<anchor xml:id="_main_8py_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;The&#32;function&#32;contains&#32;a&#32;special&#32;regular&#32;expresssion&#32;that&#32;checks&#32;all&#32;characaters&#32;individually
<anchor xml:id="_main_8py_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00076"/>00076 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new_text&#32;=&#32;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;i&#32;<emphasis role="keywordflow">in</emphasis>&#32;range(len(text)):
<anchor xml:id="_main_8py_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;\.|,|\?|\&apos;|\)|\}|\]|\:|\;&apos;</emphasis>,&#32;text[i]):
<anchor xml:id="_main_8py_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new_text&#32;=&#32;new_text+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>+text[i]
<anchor xml:id="_main_8py_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;re.match(<emphasis role="stringliteral">r&apos;\(|\{|\[|\s&apos;</emphasis>,&#32;text[i]):
<anchor xml:id="_main_8py_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new_text&#32;=&#32;new_text+text[i]+<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_main_8py_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new_text&#32;=&#32;new_text+text[i]
<anchor xml:id="_main_8py_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;new_text
<anchor xml:id="_main_8py_source_1l00085"/>00085 <emphasis role="comment">#&#32;&#32;&#32;&#32;generate&#32;a&#32;dunction&#32;to&#32;match&#32;all&#32;words&#32;starting&#32;with&#32;an&#32;A&#32;or&#32;a</emphasis>
<anchor xml:id="_main_8py_source_1l00086"/>00086 
<anchor xml:id="_main_8py_source_1l00087"/><link linkend="_classmain_1_1statement__tokenizer_1a0b0ba2147afd261c75986b242926b15c">00087</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer_1a0b0ba2147afd261c75986b242926b15c">matchAllWordsStartingWithB</link>(self,&#32;text):
<anchor xml:id="_main_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;The&#32;aim&#32;of&#32;this&#32;function&#32;is&#32;to&#32;match&#32;all&#32;words&#32;starting&#32;with&#32;an&#32;A&#32;or&#32;a&#32;this&#32;is&#32;performed&#32;by&#32;the&#32;use&#32;of&#32;a&#32;regular&#32;expression&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;formatter&#32;=&#32;re.compile(<emphasis role="stringliteral">r&apos;\b[Bb]\w+&apos;</emphasis>,&#32;re.M)
<anchor xml:id="_main_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;re.findall(formatter,&#32;text)
<anchor xml:id="_main_8py_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(<emphasis role="stringliteral">&apos;Words&#32;starting&#32;with&#32;B&#32;or&#32;b&#32;are:&#32;&apos;</emphasis>,&#32;len(data))
<anchor xml:id="_main_8py_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;data
<anchor xml:id="_main_8py_source_1l00093"/><link linkend="_classmain_1_1statement__tokenizer_1a07b22ae554127eec66337e8bb0455d11">00093</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_classmain_1_1statement__tokenizer_1a07b22ae554127eec66337e8bb0455d11">identifyPartsOfSpeech</link>(self,&#32;text):
<anchor xml:id="_main_8py_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;This&#32;function&#32;is&#32;responsible&#32;for&#32;the&#32;identification&#32;of&#32;the&#32;parts&#32;of&#32;speech&#32;of&#32;the&#32;words&#32;in&#32;the&#32;text&#32;block.</emphasis>
<anchor xml:id="_main_8py_source_1l00095"/>00095 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;takes&#32;the&#32;list&#32;of&#32;words&#32;</emphasis><emphasis role="keyword">as</emphasis>&#32;an&#32;argument&#32;<emphasis role="keywordflow">and</emphasis>&#32;returns&#32;a&#32;list&#32;of&#32;parts&#32;of&#32;speech.&#32;This&#32;will&#32;make&#32;use&#32;of&#32;the&#32;[parts_speech]&#32;file
<anchor xml:id="_main_8py_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;which&#32;contains&#32;the&#32;list&#32;of&#32;parts&#32;of&#32;speech&#32;<emphasis role="keywordflow">and</emphasis>&#32;the&#32;words&#32;that&#32;belong&#32;to&#32;each&#32;part&#32;of&#32;speech.&#32;The&#32;group&#32;works&#32;on&#32;code&#32;that&#32;deals&#32;<emphasis role="keyword">with</emphasis>&#32;the&#32;letter&#32;B
<anchor xml:id="_main_8py_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;In&#32;cases&#32;where&#32;the
<anchor xml:id="_main_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="_main_8py_source_1l00099"/>00099 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a0b0ba2147afd261c75986b242926b15c">matchAllWordsStartingWithB</link>(text)</emphasis>
<anchor xml:id="_main_8py_source_1l00100"/>00100 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">for</emphasis>&#32;word&#32;<emphasis role="keywordflow">in</emphasis>&#32;data:
<anchor xml:id="_main_8py_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;word&#32;<emphasis role="keywordflow">in</emphasis>&#32;nouns:
<anchor xml:id="_main_8py_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a5c645ea998ef0569b7e292e4be29cc60">nounList</link>.append(word)
<anchor xml:id="_main_8py_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;word&#32;<emphasis role="keywordflow">in</emphasis>&#32;pronouns:
<anchor xml:id="_main_8py_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1afd78f7a9c9e49e70eff211e394d51e62">pronounList</link>.append(word)
<anchor xml:id="_main_8py_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;word&#32;<emphasis role="keywordflow">in</emphasis>&#32;adjectives:
<anchor xml:id="_main_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a2632648ba3e0bab916fa5eeb06cb71bb">adjectiveList</link>.append(word)
<anchor xml:id="_main_8py_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;word&#32;<emphasis role="keywordflow">in</emphasis>&#32;verbs:
<anchor xml:id="_main_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a24c4eed7b89ee5776869a02ffe12b9a4">verbList</link>.append(word)
<anchor xml:id="_main_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;word&#32;<emphasis role="keywordflow">in</emphasis>&#32;adverbs:
<anchor xml:id="_main_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a8d588b23dd51598c21aa8db357a605c4">adverbList</link>.append(word)
<anchor xml:id="_main_8py_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;word&#32;<emphasis role="keywordflow">in</emphasis>&#32;conjunctions:
<anchor xml:id="_main_8py_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a588793a987c8ca33478a89ce83d2fc98">conjunctionsList</link>.append(word)
<anchor xml:id="_main_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">elif</emphasis>&#32;word&#32;<emphasis role="keywordflow">in</emphasis>&#32;interjections:
<anchor xml:id="_main_8py_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a925c7c14ab6750a9aa8bf1e811ca93e8">interjectionsList</link>.append(word)
<anchor xml:id="_main_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="_main_8py_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_classmain_1_1statement__tokenizer_1a90d8cf9378c9353c8c8c4aec38374479">unknownList</link>.append(word+<emphasis role="stringliteral">&quot;&#32;Unknown&quot;</emphasis>)
</programlisting></section>
