<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="statement_8py" kind="file" language="Python">
    <compoundname>statement.py</compoundname>
    <innerclass refid="classstatement_1_1statement__tokenizer" prot="public">statement::statement_tokenizer</innerclass>
    <innernamespace refid="namespacestatement">statement</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacestatement" refkind="compound"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;!<sp/>@brief<sp/>Example<sp/>Python<sp/>program<sp/>with<sp/>Doxygen<sp/>style<sp/>comments.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="classstatement_1_1statement__tokenizer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer" kindref="compound">statement_tokenizer</ref>:</highlight></codeline>
<codeline lineno="7" refid="classstatement_1_1statement__tokenizer_1a539e367f627418c7f0d210d6f1983f2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer_1a539e367f627418c7f0d210d6f1983f2b" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>the<sp/>constructor.<sp/>where<sp/>all<sp/>the<sp/>regex<sp/>are<sp/>defined<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>the<sp/>word<sp/>that<sp/>the<sp/>user<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>the<sp/>calling<sp/>file<sp/>will<sp/>use<sp/>to<sp/>call<sp/>the<sp/>method.</highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1ab1964d81535413d9a90d7808efa15f16" kindref="member">_pattern</ref><sp/>=<sp/>r&quot;[A-Z]+[a-z]*\s\.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1a6014c2bbeb9f5d74430d8079c8e79380" kindref="member">_sentence_pattern</ref><sp/>=<sp/></highlight><highlight class="stringliteral">r&apos;([A-Z][^\.!?]*[\.!?])&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1a60f9e3d9dd21647a3ecdb891b0820e5d" kindref="member">_word_pattern</ref><sp/>=<sp/></highlight><highlight class="stringliteral">r&apos;\w+&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1a9b0e58181d537ac5ad3f9943fb5f59f6" kindref="member">_regex</ref><sp/>=<sp/>re.compile(self.<ref refid="classstatement_1_1statement__tokenizer_1a6014c2bbeb9f5d74430d8079c8e79380" kindref="member">_sentence_pattern</ref>)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1ae3e4a3059da14fb5b9c8801bc9d96ff8" kindref="member">_tokens</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="classstatement_1_1statement__tokenizer_1af31fdead83a1bf102c9c769855cc5965" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer_1af31fdead83a1bf102c9c769855cc5965" kindref="member">get_tokens</ref>(self,<sp/>text)<sp/>-&gt;<sp/>list:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>responsible<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>splitting<sp/>of<sp/>the<sp/>individual<sp/>strings<sp/>into<sp/>the<sp/>required<sp/>tokens<sp/>which</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>takes<sp/><sp/>text<sp/>(string)<sp/>the<sp/>text<sp/>that<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>to<sp/>be<sp/>split<sp/>into<sp/>tokens.<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>returns<sp/>a<sp/>list<sp/>of<sp/>tokens.</highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1ae3e4a3059da14fb5b9c8801bc9d96ff8" kindref="member">_tokens</ref><sp/>=<sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1a9e8a94c666203e2e3a1e502381afcbec" kindref="member">peformSentenceSplit</ref>(text)</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1ae3e4a3059da14fb5b9c8801bc9d96ff8" kindref="member">_tokens</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="classstatement_1_1statement__tokenizer_1a9449283c6a72dff3aa0ede6aed4f0186" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer_1a9449283c6a72dff3aa0ede6aed4f0186" kindref="member">__str__</ref>(self)<sp/>-&gt;<sp/>str:</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>responsible<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>printing<sp/>of<sp/>the<sp/>tokens<sp/>that<sp/>are<sp/>returned<sp/>by<sp/>the<sp/>get_tokens<sp/>method.</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>takes<sp/>no<sp/>arguments<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>returns<sp/>a<sp/>string<sp/>of<sp/>the<sp/>tokens.<sp/>it<sp/>basically<sp/>overites<sp/>the<sp/>default<sp/>__str__<sp/>method.</highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1ae3e4a3059da14fb5b9c8801bc9d96ff8" kindref="member">_tokens</ref>:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;statement<sp/>-&gt;<sp/>{s}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classstatement_1_1statement__tokenizer_1a85a8d55580c14f82f58e630ba075026d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer_1a85a8d55580c14f82f58e630ba075026d" kindref="member">__repr__</ref>(self)<sp/>-&gt;<sp/>str:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>responsible<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>printing<sp/>of<sp/>the<sp/>tokens<sp/>that<sp/>are<sp/>returned<sp/>by<sp/>the<sp/>get_tokens<sp/>method.</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>takes<sp/>no<sp/>arguments<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>returns<sp/>a<sp/>string<sp/>of<sp/>the<sp/>tokens.<sp/>it<sp/>basically<sp/>overites<sp/>the<sp/>default<sp/>__repr__<sp/>method.</highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1ae3e4a3059da14fb5b9c8801bc9d96ff8" kindref="member">_tokens</ref>:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(f</highlight><highlight class="stringliteral">&quot;statement<sp/>-&gt;<sp/>{s}&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classstatement_1_1statement__tokenizer_1a9e8a94c666203e2e3a1e502381afcbec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer_1a9e8a94c666203e2e3a1e502381afcbec" kindref="member">peformSentenceSplit</ref>(self,<sp/>text):</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;This<sp/>function<sp/>takes<sp/>part<sp/>in<sp/>tokenization<sp/>of<sp/>whole<sp/>text<sp/>blocks<sp/>to<sp/>aid<sp/>the<sp/>word<sp/>tokenizer<sp/>to<sp/>be<sp/>able<sp/>to<sp/>identifty<sp/>tokens</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>based<sp/>on<sp/>specific<sp/>word.<sp/>This<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>a<sp/>part<sp/>which<sp/>makes<sp/>the<sp/>whole<sp/>system<sp/>modular<sp/>making<sp/>it<sp/>possible<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>sentence<sp/>to<sp/>be<sp/>handled<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocks.<sp/>this<sp/>will<sp/>also<sp/>give<sp/>the<sp/>possibility<sp/>to<sp/>thet<sp/>count<sp/>of<sp/>the<sp/>number<sp/>of<sp/>sentences<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formatter<sp/>=<sp/>re.compile(self.<ref refid="classstatement_1_1statement__tokenizer_1a6014c2bbeb9f5d74430d8079c8e79380" kindref="member">_sentence_pattern</ref>,<sp/>re.M)</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>formatter.findall(text)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classstatement_1_1statement__tokenizer_1a10eb35f9e1c1f020d416d494e0ba5f5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer_1a10eb35f9e1c1f020d416d494e0ba5f5b" kindref="member">performWordSplit</ref>(self,<sp/>text):</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;This<sp/>function<sp/>takes<sp/>part<sp/>in<sp/>tokenization<sp/>of<sp/>whole<sp/>text<sp/>blocks<sp/>to<sp/>aid<sp/>the<sp/>word<sp/>tokenizer<sp/>to<sp/>be<sp/>able<sp/>to<sp/>identifty<sp/>tokens</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>based<sp/>on<sp/>specific<sp/>word.<sp/>This<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>a<sp/>part<sp/>which<sp/>makes<sp/>the<sp/>whole<sp/>system<sp/>modular<sp/>making<sp/>it<sp/>possible<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>sentence<sp/>to<sp/>be<sp/>handled<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocks.<sp/>this<sp/>will<sp/>also<sp/>give<sp/>the<sp/>possibility<sp/>to<sp/>thet<sp/>count<sp/>of<sp/>the<sp/>number<sp/>of<sp/>sentences<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formatter<sp/>=<sp/>re.compile(self.<ref refid="classstatement_1_1statement__tokenizer_1a60f9e3d9dd21647a3ecdb891b0820e5d" kindref="member">_word_pattern</ref>,<sp/>re.M)</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>formatter.findall(text)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classstatement_1_1statement__tokenizer_1a43a95712f250e8ded2b23ef48988bc86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer_1a43a95712f250e8ded2b23ef48988bc86" kindref="member">getAllTokens</ref>(self,<sp/>text):</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>responsible<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>tokenization<sp/>of<sp/>the<sp/>whole<sp/>text<sp/>block.<sp/>it<sp/>takes<sp/>the<sp/>text<sp/>block<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>an<sp/>argument<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>returns<sp/>a<sp/>list<sp/>of<sp/>tokens.</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textData<sp/>=<sp/>self.<ref refid="classstatement_1_1statement__tokenizer_1afa19774ffa56f61147efb0a4e84f88b1" kindref="member">retainAllTokens</ref>(text)</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>textData.split()</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="classstatement_1_1statement__tokenizer_1afa19774ffa56f61147efb0a4e84f88b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer_1afa19774ffa56f61147efb0a4e84f88b1" kindref="member">retainAllTokens</ref>(self,<sp/>text):</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>fuction<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>tp<sp/>prevent<sp/>the<sp/>elimination<sp/>of<sp/>special<sp/>characters<sp/>to<sp/>avoid<sp/>elimination<sp/>during<sp/>text<sp/>splitting</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>will<sp/>be<sp/>especially<sp/>important<sp/>what<sp/>there<sp/>will<sp/>to<sp/>be<sp/>identification<sp/>of<sp/>known<sp/>patters.</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>function<sp/>contains<sp/>a<sp/>special<sp/>regular<sp/>expresssion<sp/>that<sp/>checks<sp/>all<sp/>characaters<sp/>individually</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_text<sp/>=<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(text)):</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>re.match(</highlight><highlight class="stringliteral">r&apos;\.|,|\?|\&apos;|\)|\}|\]|\:|\;&apos;</highlight><highlight class="normal">,<sp/>text[i]):</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_text<sp/>=<sp/>new_text+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">+text[i]</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>re.match(</highlight><highlight class="stringliteral">r&apos;\(|\{|\[|\s&apos;</highlight><highlight class="normal">,<sp/>text[i]):</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_text<sp/>=<sp/>new_text+text[i]+</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_text<sp/>=<sp/>new_text+text[i]</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_text</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>generate<sp/>a<sp/>dunction<sp/>to<sp/>match<sp/>all<sp/>words<sp/>starting<sp/>with<sp/>an<sp/>A<sp/>or<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classstatement_1_1statement__tokenizer_1a6736292ecfe03911105e95b9d36c6d97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer_1a6736292ecfe03911105e95b9d36c6d97" kindref="member">matchAllWordsStartingWithA</ref>(self,<sp/>text):</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;The<sp/>aim<sp/>of<sp/>this<sp/>function<sp/>is<sp/>to<sp/>match<sp/>all<sp/>words<sp/>starting<sp/>with<sp/>an<sp/>A<sp/>or<sp/>a<sp/>this<sp/>is<sp/>performed<sp/>by<sp/>the<sp/>use<sp/>of<sp/>a<sp/>regular<sp/>expression&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>re.findall(</highlight><highlight class="stringliteral">r&apos;\b[Aa]\w+&apos;</highlight><highlight class="normal">,<sp/>text)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classstatement_1_1statement__tokenizer_1af571c51d84cfeb007f10f703bc7e65c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classstatement_1_1statement__tokenizer_1af571c51d84cfeb007f10f703bc7e65c4" kindref="member">fsa</ref>(word):</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(re.search(</highlight><highlight class="stringliteral">r&apos;^a.+&apos;</highlight><highlight class="normal">,<sp/>word)):</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ance$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ence$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ar$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*er$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ir$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*or$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ur$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ism$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ment$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*age$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*hood$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ness$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*irt$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*er$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*bots&apos;</highlight><highlight class="normal">,<sp/>word):</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;noun&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*able$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ible$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ant$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ent$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ists$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ist$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ous$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ful$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ish&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ive$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ize$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ify$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ize&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ize$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ize$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ize$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ise$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ize$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ed$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ate$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*y$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ons$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ing&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*de&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ound&apos;</highlight><highlight class="normal">,<sp/>word):</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;verb&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ly$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*ry$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>word<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;right&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*here$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>word<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;wrong&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*here$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>word<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;soon&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*soon$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*times$&apos;</highlight><highlight class="normal">,<sp/>word)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">r&apos;.*in$&apos;</highlight><highlight class="normal">,<sp/>word):</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;adverb&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;valid<sp/>but<sp/>unknown&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>word&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>generate<sp/>a<sp/>function<sp/>to<sp/>identify<sp/>all<sp/>parts<sp/>of<sp/>speech<sp/>in<sp/>a<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>def<sp/>identifyAllPartsOfSpeech(self,<sp/>text):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">#<sp/>if<sp/>__name__<sp/>==<sp/>&quot;__main__&quot;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>statement_tokenizer()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>&quot;&quot;&quot;Today,<sp/>technology<sp/>is<sp/>a<sp/>subject<sp/>of<sp/>debate<sp/>because<sp/>it<sp/>is<sp/>considered<sp/>to<sp/>be<sp/>a<sp/>double-edged<sp/>sword.<sp/>While<sp/>it<sp/>has<sp/>helped<sp/>humanity<sp/>in<sp/>extending<sp/>its<sp/>potential<sp/>with<sp/>outstanding<sp/>inventions,<sp/>it<sp/>is<sp/>nonetheless<sp/>threatening<sp/>humankind<sp/>through<sp/>some<sp/>other<sp/>destructive<sp/>ones.<sp/>In<sp/>addition<sp/>to<sp/>polluting<sp/>the<sp/>earth<sp/>in<sp/>unprecedented<sp/>ways,<sp/>wars<sp/>have<sp/>become<sp/>more<sp/>and<sp/>more<sp/>devastating<sp/>due<sp/>to<sp/>technological<sp/>inventions.<sp/>Ethical<sp/>dimensions<sp/>of<sp/>recent<sp/>technological<sp/>developments,<sp/>such<sp/>as<sp/>DNA<sp/>engineering,<sp/>have<sp/>become<sp/>a<sp/>focal<sp/>point<sp/>of<sp/>questioning<sp/>and<sp/>discussion.<sp/>Philosophical<sp/>debates<sp/>have<sp/>arisen<sp/>over<sp/>the<sp/>use<sp/>of<sp/>technology,<sp/>with<sp/>disagreements<sp/>over<sp/>whether<sp/>technology<sp/>improves<sp/>the<sp/>human<sp/>condition<sp/>or<sp/>worsens<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">#<sp/>To<sp/>make<sp/>matters<sp/>worse,<sp/>a<sp/>consensus<sp/>definition<sp/>of<sp/>technology<sp/>has<sp/>become<sp/>more<sp/>difficult<sp/>to<sp/>find<sp/>due<sp/>to<sp/>recent<sp/>evolution<sp/>in<sp/>science<sp/>and<sp/>its<sp/>applications.<sp/>It<sp/>is<sp/>especially<sp/>confusing<sp/>to<sp/>decide<sp/>whether<sp/>technology<sp/>refers<sp/>to<sp/>the<sp/>machines<sp/>(or<sp/>more<sp/>precisely<sp/>the<sp/>hardware),<sp/>the<sp/>rules<sp/>that<sp/>govern<sp/>or<sp/>make<sp/>them<sp/>work,<sp/>the<sp/>system<sp/>that<sp/>operates<sp/>them<sp/>or<sp/>the<sp/>different<sp/>applications<sp/>of<sp/>science<sp/>that<sp/>are<sp/>related<sp/>to<sp/>them.<sp/>What<sp/>is<sp/>sure<sp/>is<sp/>that<sp/>technology<sp/>has<sp/>shaped<sp/>societies<sp/>and<sp/>adapted<sp/>itself<sp/>to<sp/>people&apos;s<sp/>changing<sp/>needs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">#<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>formatted<sp/>=<sp/>data.retainAllTokens(text.strip())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>print(&quot;<sp/>&quot;.join(data.matchAllWordsStartingWithA(formatted)))</highlight></codeline>
    </programlisting>
    <location file="statement.py"/>
  </compounddef>
</doxygen>
